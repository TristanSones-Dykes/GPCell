# Introduction

The regulation of gene expression is fundamental to cellular processes, dictating how genes are activated or repressed in response to various stimuli. A landmark discovery by Jacob and Monod in the 1960s [@jacob_genetic_1961] demonstrated that genes could be switched on or off through the modulation of mRNA transcription, a mechanism that garnered them the Nobel Prize. While their research provided insights into gene regulation mechanisms, it did not delve into the temporal dynamics of gene expression.​

In the 1980s, research into the temporal aspects of gene expression gained momentum. @hardin_feedback_1990 proposed the Transcription Translation Negative Feedback Loop to explain circadian rhythms in *Drosophila melanogaster*. They discovered that certain genes exhibited oscillatory behavior, regulated by proteins that inhibited their own RNA production, thereby establishing a feedback loop.​

Furthering this line of inquiry, @phillips_identifying_2017 explored gene expression patterns in neural progenitor cells, revealing that such expression could be either oscillatory or aperiodic. Notably, oscillatory expression was associated with cellular differentiation. Their methodology involved fitting both oscillating and non-oscillating Gaussian processes to gene expression time series data, enabling the classification of genes based on their oscillatory behavior. However, their approach was primarily applied within a specific biological context, limiting its generalisability; it was also developed in MATLAB, narrowing its possible scope and extensibility.

This dissertation aims to broaden the applicability of @phillips_identifying_2017's methodology by developing a testable and extensible Python library. This library is designed to facilitate model-fitting and oscillation detection across various datasets and experimental conditions. Utilizing the GPflow library, which is based on TensorFlow, it provides a user-friendly interface for researchers, with an OscillatorDetector class specifically designed for this use-case. It also has unit tests to verify correctness, a strong type system to aid development and upkeep, as well as a suite of abstracted utility functions that automate the model fitting process through a multiprocessing pipeline increasing fitting speed.