# Introduction

## Biological Background
The regulation of gene expression is fundamental to cellular processes, dictating how genes are activated or repressed in response to various stimuli. A landmark discovery by Jacob and Monod in the 1960s [@jacob_genetic_1961] demonstrated that genes could be switched on or off through the modulation of mRNA transcription, a mechanism that garnered them the Nobel Prize. While their research provided insights into gene regulation mechanisms, it did not delve into the temporal dynamics of gene expression.​

In the 1980s, research into the temporal aspects of gene expression gained momentum. @hardin_feedback_1990 proposed the Transcription Translation Negative Feedback Loop to explain circadian rhythms in *Drosophila melanogaster*. They discovered that certain genes exhibited oscillatory behavior, regulated by proteins that inhibited their own RNA production, thereby establishing a feedback loop.​

## Problem Statement
Furthering this line of inquiry, @phillips_identifying_2017 explored gene expression patterns in neural progenitor cells, revealing that such expression could be either oscillatory or aperiodic. Notably, oscillatory expression was associated with cellular differentiation. Their methodology involved fitting both oscillating and non-oscillating Gaussian processes to gene expression time series data, enabling the classification of genes based on their oscillatory behavior. 

However, their approach was primarily developed for a specific biological context and model setup, limiting its extensibility. It was also developed using a library no longer being developed in MATLAB, narrowing its possible scope, as well as requiring users to obtain a license and follow an unfamiliar build pipeline (compared to that of R or Python).
<br>Additionally, their technique is not fully bayesian, as it uses a parametric bootstrap to fine-tune the classification boundary.

This presents a need for an extensible, generalisable library to easily handle Gaussian Processes and classify gene expressions into oscillatory and non-oscillatory using modern development techniques such as unit tests, consistent typing, and CI/CD.
