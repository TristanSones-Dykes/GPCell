# Introduction

## Biological Background

Oscillatory gene expression is a widespread phenomenon across diverse biological systems, serving critical roles in timing and information encoding. Examples span a vast range of timescales: from ultradian calcium oscillations on the order of seconds, to cell-cycle and developmental rhythms of a few hours, up to 24-hour circadian clocks; @phillips_identifying_2017. For instance, circadian gene expression in individual fibroblast cells is self-sustained – each cell functions as an autonomous oscillator passing its phase to offspring cells; @nagoshi2004. Similarly, oscillatory dynamics have been observed in the NF-κB signaling pathway (pulsatile nuclear localization driving gene bursts; @nelson2004) and the p53 tumor suppressor system (repeated p53 protein pulses after DNA damage; Geva-Zatorsky et al., 2006​ journals.plos.org ). During vertebrate embryonic development, the segmentation clock exemplifies how oscillations pattern multicellular systems: waves of gene expression (Hairy/Hes genes) sweep across the presomitic mesoderm, coordinating somite formation in space and time​; *Patterning embryos with oscillations:* @oates2012. These and other cases (e.g. cyclic expression of cell-fate regulators like HES1/Ascl1 in neural progenitors) highlight that oscillatory gene expression is a fundamental, conserved mechanism in biology.

Biologically, oscillations confer several functional advantages. Intuitively, oscillatory circuits can act as temporal regulators or “clocks" like those mentioned above. Beyond time-keeping, oscillatory dynamics allow information encoding in ways that static levels cannot. Because an oscillation is characterized by parameters like frequency and amplitude, cells can modulate these features to encode signals​ journals.plos.org . A well-known example is the ERK/Ras pathway, where the frequency vs. amplitude of ERK pulses can differentially activate downstream genes; @sonnen2014. In stem cells, the pattern of gene expression (oscillatory versus sustained) can determine cell fate decisions. For instance, neural stem cells exhibit 2–3 hour oscillations in HES1, which in turn cause out-of-phase oscillations in the proneural factor Ascl1. Oscillatory Ascl1 expression keeps these cells in a proliferative, undifferentiated state, whereas switching to sustained Ascl1 expression triggers differentiation into neurons; @imayoshi2013. Thus, beyond gene expression level alone, the *dynamics* of expression carry biologically relevant information that can dictate outcomes;​ @marinopoulou2021.

### Mechanistic basis

At the molecular level, oscillatory gene expression typically arises from negative feedback loops with delays. A canonical motif is a transcriptional repressor that inhibits its own expression after a time lag, producing rhythmic ups and downs. The HES1 oscillator is a classic example: HES1 protein represses the Hes1 gene, but protein turnover creates a delay that allows transcript levels to rise and fall periodically; @marinopoulou2021. This delayed negative feedback mechanism was predicted by theoretical models – @goodwin1965 – and later observed experimentally; @hirata2002. Synthetic biology has also demonstrated that simple gene circuits can oscillate; *the Repressilator* @elowitz2000 engineered in E. coli was a landmark showing that a three-gene feedback loop yields oscillatory protein expression, validating design principles of biological oscillators. Mathematically, these systems are often described by limit cycle oscillators or coupled differential equations with delays, and analysis tools from nonlinear dynamics (e.g. Hopf bifurcation analysis) have been applied to understand their stability and periodicity – @novák2008 – which states all biochemical oscillators are characterised by negative feedback with time delay. Stochastic effects, however, play a major role at the single-cell level – gene expression involves small numbers of mRNAs/proteins reacting stochastically, leading to intrinsic noise in dynamics;​ @phillips_identifying_2017. In particular, transcriptional bursting (episodic production of mRNA) can produce fluctuations that mimic or obscure oscillatory patterns​, or cell might exhibit irregular, quasi-periodic bursts rather than a perfect periodic sinusoid​; this blurring of “signal” (true oscillation) and “noise” (aperiodic fluctuation) makes it challenging to decide if a given single-cell time series is genuinely oscillatory​; @phillips_identifying_2017.

### Single-cell perspective

Until recently, gene expression oscillations were primarily characterized in cell populations or tissue averages, which can obscure cell-to-cell differences. Advances in single-cell genomics and imaging have revolutionized this area by enabling time-resolved measurements in individual cells. Live-cell reporters (e.g. luciferase or fluorescent proteins under control of oscillatory promoters) allow continuous recording of gene expression in single cells over hours or days​ @phillips_identifying_2017. This has revealed profound cell-to-cell heterogeneity: even in genetically identical cells, some may oscillate strongly while others do not, or oscillations may vary in period and amplitude from cell to cell​ journals.plos.org . For example, in a population of fibroblasts, each cell’s circadian phase can drift, leading to desynchronized averages despite robust single-cell cycles; @welsh2004, @nagoshi2004. In the case of HES1 dynamics, live single-cell imaging showed only a subset of cells oscillate measurably, and oscillation coherence can change with developmental context​ @phillips_identifying_2017. Single-cell RNA sequencing (scRNA-seq) and single-molecule FISH (@kwon2013) have provided complementary “snapshots” of gene expression across many individual cells. The surge of such data in the last decade has created a need for quantitative methods to analyze noisy time series from individual cells​.

## Current Work

Traditional signal-processing approaches for periodicity detection (Fourier transforms, autocorrelation, Lomb–Scargle periodograms, etc.) often fail on short, noisy cellular time series with irregular oscillation profiles​. These classical methods assume long, stationary signals or low noise, conditions rarely met in single-cell experiments (which may only track a few oscillation cycles before photobleaching or cell division, and where noise is significant)​. To address this, researchers have turned to statistical modeling approaches that can explicitly account for noise and uncertainty. In particular, Gaussian processes (GPs) have emerged as a powerful framework for analyzing oscillatory time series in single cells. GPs are flexible non-parametric models that can capture arbitrarily complex temporal patterns with well-characterized uncertainty, making them attractive for classifying oscillations in noisy data. @phillips_identifying_2017 introduced a pioneering GP-based method to decide if a given single-cell trajectory is oscillatory or not​. Their approach combined a mechanistic stochastic model of a gene regulatory oscillator with GP regression, enabling an objective classification that outperformed the Lomb–Scargle periodogram​. In tests on simulated data and on live-cell imaging of a luminescent Hes1 reporter, the GP method reliably distinguished truly oscillatory cells from those with mere noise-driven fluctuations​.\
Their method is, however, not fully Bayesian as it uses parametric bootstrapping to obtain a better estimate of the classification boundary.

------------------------------------------------------------------------

Choice of programming environment is a key consideration when developing a Gaussian Process (GP) modeling framework for bioinformatics. Historically, MATLAB was widely used for GP research for example the influential GPML toolbox accompanying @rasmussen2005, and the later GPstuff package; @vanhatalo, provided a rich set of GP algorithms in MATLAB. However, in recent years the balance has shifted strongly toward Python for both research and practical applications. Below, we justify the decision to use Python (and specifically a Python-based GP library) over MATLAB for our GPCell framework, considering ecosystem maturity, performance, extensibility, and integration needs:

**1. Open-Source Ecosystem and Reproducibility:** Python is free and open-source, which fosters broad usage and community-driven development. Anyone can run and inspect Python code without restrictive licenses, an important factor for reproducible science. By contrast, MATLAB is proprietary software – requiring a license – which can hamper reproducibility and accessibility (Ince *et al.*, 2012).

**2. Specialized GP Libraries and Performance:** The Python ecosystem for GPs is more mature and performant than MATLAB’s current offerings. Notably, **GPflow** – @matthews – and **GPyTorch –** @gardner – are two leading libraries that leverage modern machine learning frameworks for speed and scalability. GPflow builds on TensorFlow, enabling automatic differentiation and accelerated linear algebra on GPUs​.

\newpage

**3. Ecosystem and Integration with Bioinformatics Tools:** Bioinformatics workflows often involve diverse data types (genomic sequences, expression matrices, network data) and multiple analysis steps. Python has become a lingua franca in data science, enabling seamless integration of GP modeling with upstream and downstream analyses. For instance, one can use pandas or NumPy to manipulate genomic data, feed it into a GP model from GPflow, and then visualize results with Matplotlib or Seaborn, all within one environment. There are also domain-specific Python libraries (Scanpy for single-cell RNA-seq, Biopython, scikit-learn, etc.) that interoperate well. In contrast, MATLAB, while strong in matrix computations, is less commonly used in genomics and lacks the breadth of specialized bioinformatics libraries. Many cutting-edge bioinformatics methods (e.g. for single-cell data or deep learning-based analyses) are released in Python or R, not MATLAB, making Python a more natural choice for compatibility. Additionally, Python’s ability to wrap C/C++ and interface with R (via rpy2) means it can serve as a hub, combining methods across ecosystems – something more cumbersome with MATLAB. You could also use reticulate and connect Python to an R script, using it as a computational backend.

**4. Continuous Integration and Deployment (CI/CD) Friendliness:** Developing a robust software package like GPCell benefits from modern DevOps practices. Python’s packaging system (pip/conda) and testing frameworks (unittest, pytest) allow easy distribution and validation of the code on multiple platforms. Free CI services (GitHub Actions, Travis CI, etc.) can automatically run test suites on each commit, which is feasible since Python is open source.\
Additionally, high performance MATLAB code, including GPML that @phillips_identifying_2017 based their library on, requires a separate compile and build process before anything is ran. This added complexity, unlike with exclusively Python dependencies, reduces the number of researchers it is able to target, though it may not seem so to the developers.

## Problem Statement

This presents a need for an extensible, generalisable library to easily handle Gaussian Processes and classify gene expressions into oscillatory and non-oscillatory using modern development techniques such as unit tests, consistent typing, and CI/CD. As well as a gap in the literature for a fully Bayesian approach that is at least as good as the parametric bootstrap approach; or can offer some additional benefits of Bayesian inference the current one is unable to.