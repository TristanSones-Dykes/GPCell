---
title: "GPCell: A Performant Framework for Gaussian Processes in Bioinformatics"
author: "Tristan Sones-Dykes"
date: "April 2025"
institute: "School of Mathematics and Statistics, The University of St Andrews"
format:
  beamer
slide-level: 2
bibliography: references.bib
---

## Agenda

- Motivation & Background
- Problem Statement
- The Solution: GPCell
- Results
- Discussion
- Q&A

## Motivation & Background

- **Historical Foundations**
  - @jacob_genetic_1961: Demonstrated gene expression as a result of external stimuli through mRNA modulation
  - @hardin_feedback_1990: Demonstrated feedback mechanisms in gene expression, revealing oscillatory behavior in circadian rhythms.
  - @phillips_identifying_2017: Applied Gaussian processes to classify gene expression time series in neural progenitor cells, highlighting oscillatory versus aperiodic dynamics.
- **Introduction to Gaussian Processes**
  - A non-parametric, probabilistic modeling approach that offers flexibility in fitting complex biological signals and quantifying uncertainty.

---

![Example of fit GPs](detrend.png)

## Problem Statement

- **Biological Background**
  - Gene expression regulation is central to cellular function and its oscillatory dynamics can indicate critical biological processes such as differentiation.
- **Current implementation**
  - MATLAB-based Approach: Previous work relied on MATLAB, limiting accessibility and integration with modern machine learning libraries.
  - Performance Issues: Traditional implementations faced slow model fitting and lacked support for parallel processing.
  - Limited Extensibility: The original system was tailored to a specific context and difficult to extend with new inference techniques (e.g., MCMC, Variational Inference).

## GPCell

- **Overview:**
  - A generalised Python library, based on GPflow (Tensorflow Probability), to facilitate model fitting and oscillation detection.
- **Key Features:**
  - **OscillatorDetector:**: A class that handles the entire analysis pipeline (background noise estimation, detrending, and GP model fitting).
  - Extensible **GaussianProcess** class: Allows for adding different models (e.g., MCMC for probabilistic inference) and various fitting algorithms.
  - **Utils** module: for fitting models/generating data quickly in parallel.
  - **Robust Pipeline**: Incorporates a strong type system, automated CI/CD, and comprehensive testing for reproducibility.

## Methods & Results

- **Validation:**
  - GPCell has been rigorously tested on both synthetic and real gene expression datasets.
  - Unit tests (see correctness.py and gpflow_tests.py) ensure that background noise, detrending, and GP parameter estimation are accurate.
- **Performance:**
  - Leverages parallel processing via Joblib (see fit_processes in utils.py) to dramatically reduce computation time
  - Demonstrated improvements in model fitting speed and oscillation detection accuracy.
- **Visuals:**
  - Results include performance charts and model prediction plots (e.g., mean and variance estimates from the GaussianProcess class).

---

![ROC of Gaussian Process and Lomb-Scargle fits](ROC_plot.png){height=85%}

## Figures
### Performance Comparisons: Data simulation
```{r}
impl_names <- c(
  "Python, parallel and njit",
  "Python, parallel",
  "Python",
  "MATLAB"
)

times <- c(
  "58.64",
  "315.23",
  "3722.16",
  "Approx 1.5 hours"
)

knitr::kable(data.frame(Implementation = impl_names, `Time (s)` = times), caption = "Average data simulation times")
```

---

### Performance Comparisons: BIC pipeline

```{r}
impl_names <- c(
  "Python, parallel",
  "Python",
  "MATLAB"
)

times <- c(
  12.54,
  37.03,
  44.41
)

knitr::kable(data.frame(Implementation = impl_names, `Time (s)` = times), caption = "Average BIC pipeline times")
```

### MCMC
![Example MCMC fit using GPCell](mcmc.png){height=30%}


## Discussion & Impact

- **Strengths:**
  - Modularity: Each component (noise estimation, detrending, GP fitting) is self-contained, making the system easy to maintain and extend.
  - Flexibility: Supports multiple inference techniques (BIC, bootstrap, MCMC) and custom kernel composition.
- **Challenges:**
  - Parameter Tuning: Fine-tuning priors and hyperparameters remains challenging in heterogeneous datasets.
  - Scalability: Handling extremely large datasets may require additional optimizations.
  - Previous Work: Inconsistent choices made (e.g priors) that need to be investigated.
- **Broader Impact:**
  - By transitioning from MATLAB to Python, GPCell enhances reproducibility and accessibility for bioinformatics researchers.


## Q & A

**Thank you!**  
Questions?
